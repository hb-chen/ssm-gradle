archivesBaseName = 'dao'

//apply plugin: 'org.flywaydb.flyway'

/**
 * 插件库
 */
buildscript {
    repositories {
        //mavenCentral()
        maven {
            //url "http://maven.aliyun.com/nexus/content/groups/public"
            url("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        //classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/**
 * 公共
 */
def getDbProperties = {
    def properties = new Properties()
    def dbPropertiesPath = sourceSets.main.resources.srcDirs[1].path;
    file("$dbPropertiesPath/db-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }

    properties;
}

sourceSets {
    main {
        resources {
            srcDir("src/main/resources")
            if (project['env'] == 'dev') {
                srcDir("src/main/resources-dev")
            } else if (project['env'] == 'prod') {
                srcDir('src/main/resources-prod')
            }
        }
    }
}

/**
 * Flyway
 * ./gradlew flywayMigrate
 */
//flyway {
//    def prop = getDbProperties()
//
//    user = prop.getProperty('jdbc.user')
//    url = prop.getProperty('jdbc.url')
//    password = prop.getProperty('jdbc.pass')
//    locations = ["classpath:db/migration"]
//    //baselineOnMigrate = true
//}

/**
 * MyBatis
 * ./gradlew mybatisGenerat
 */
configurations {
    mybatisGenerator
}

task mybatisGenerate doLast {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: sourceSets.main.resources.srcDirs[0].path + '/db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}

/**
 * 依赖
 */
dependencies {
    compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")

    compile("org.springframework:spring-beans:${springVersion}")
    compile("org.springframework:spring-context:${springVersion}")

    compile("mysql:mysql-connector-java:${mysqlVersion}")
    compile("org.mybatis:mybatis:${mybatisVersion}")
    compile("org.mybatis:mybatis-spring:${mybatisSpringVersion}")

    compile("tk.mybatis:mapper:${mybatisMapper}")
    compile("com.github.pagehelper:pagehelper:${mybatisPagehelper}")

    mybatisGenerator("org.mybatis.generator:mybatis-generator-core:${mybatisGeneratorVersion}")
    mybatisGenerator("mysql:mysql-connector-java:${mysqlVersion}")
    mybatisGenerator("tk.mybatis:mapper:${mybatisMapper}")
}