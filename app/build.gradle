archivesBaseName = 'app'

apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'

/**
 * 使用application运行
 * ./gradlew run
 */
// apply plugin: 'application'
// mainClassName = 'com.hobo.app.Application'

/**
 * 插件库
 */
buildscript {
    repositories {
        //mavenCentral()
        maven {
            //url "http://maven.aliyun.com/nexus/content/groups/public"
            url("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:$versions.protobufGradle")
    }
}

sourceSets {
    main {
        java {
            srcDirs += 'build/generated/source/proto/main/java'
        }
    }
}

// tag::war[]
//apply plugin: 'war'
//war {
//    baseName = 'spring-gradle'
//    version =  '0.1.0'
//}
// end::war[]

// tag::jar[]
jar {
    baseName = 'spring-gradle'
    version =  '0.1.0'
}
// end::jar[]

configurations {
    all*.exclude module: 'slf4j-log4j12'
    providedRuntime
}

/**
 * 依赖
 */
dependencies {
    compile project(":dao")
    compile project(":service")
    compile project(":security")

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    // Micro
    compile("com.sixt.service:ja-micro:$versions.jaMicro")

    // Mahout
    compile("org.apache.mahout:mahout:$versions.mahout")
    compile("org.apache.mahout:mahout-math:$versions.mahout")
    compile("org.apache.mahout:mahout-hdfs:$versions.mahout")
    compile("org.apache.mahout:mahout-spark_2.10:$versions.mahout")
    compile("org.apache.mahout:mahout-integration:$versions.mahout") {
        exclude group: 'org.mortbay.jetty', module: 'jetty'
        exclude group: 'org.apache.cassandra', module: 'cassandra-all'
        exclude group: 'me.prettyprint', module: 'hector-core'
    }

    compile("joda-time:joda-time:${jodatimeVersion}")
    testCompile("junit:junit")
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$versions.protobuf"
    }
}